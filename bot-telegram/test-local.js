require('dotenv').config();
const mongoose = require('mongoose');
const { loadConfig, saveConfig, resetConfig, Config } = require('./config');

async function testBot() {
    console.log('üß™ Test du bot Telegram avec MongoDB\n');
    
    // V√©rifier les variables d'environnement
    console.log('üìã V√©rification des variables d\'environnement:');
    console.log('- BOT_TOKEN:', process.env.BOT_TOKEN ? '‚úÖ D√©fini' : '‚ùå Manquant');
    console.log('- ADMIN_ID:', process.env.ADMIN_ID ? '‚úÖ D√©fini' : '‚ùå Manquant');
    console.log('- MONGODB_URI:', process.env.MONGODB_URI ? '‚úÖ D√©fini' : '‚ùå Manquant');
    
    if (!process.env.BOT_TOKEN || !process.env.ADMIN_ID) {
        console.error('\n‚ùå Variables manquantes! Cr√©ez un fichier .env avec BOT_TOKEN et ADMIN_ID');
        process.exit(1);
    }
    
    console.log('\nüìä Test de MongoDB:');
    
    try {
        // Attendre la connexion MongoDB
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Tester le chargement de la configuration
        console.log('\n1Ô∏è‚É£ Test de chargement de la configuration...');
        const config = await loadConfig();
        console.log('‚úÖ Configuration charg√©e:', {
            welcomeMessage: config.welcomeMessage?.substring(0, 30) + '...',
            socialNetworks: config.socialNetworks?.length || 0
        });
        
        // Tester la sauvegarde
        console.log('\n2Ô∏è‚É£ Test de sauvegarde...');
        const testConfig = {
            ...config,
            welcomeMessage: 'Test message ' + new Date().toISOString()
        };
        const saved = await saveConfig(testConfig);
        console.log(saved ? '‚úÖ Sauvegarde r√©ussie' : '‚ùå √âchec de la sauvegarde');
        
        // V√©rifier la persistance
        console.log('\n3Ô∏è‚É£ Test de persistance...');
        const reloaded = await loadConfig();
        if (reloaded.welcomeMessage === testConfig.welcomeMessage) {
            console.log('‚úÖ Les modifications sont bien persist√©es!');
        } else {
            console.log('‚ùå Les modifications ne sont pas persist√©es');
        }
        
        // Afficher les collections
        console.log('\n4Ô∏è‚É£ Collections MongoDB:');
        const collections = await mongoose.connection.db.listCollections().toArray();
        collections.forEach(col => {
            console.log(`- ${col.name}`);
        });
        
        // Compter les documents
        console.log('\n5Ô∏è‚É£ Statistiques:');
        const configCount = await Config.countDocuments();
        console.log(`- Configurations: ${configCount}`);
        
        console.log('\n‚úÖ Tous les tests sont pass√©s! Le bot est pr√™t pour le d√©ploiement.');
        
    } catch (error) {
        console.error('\n‚ùå Erreur pendant les tests:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nüëã Connexion MongoDB ferm√©e');
        process.exit(0);
    }
}

// Lancer les tests
testBot();